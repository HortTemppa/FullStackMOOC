{"version":3,"sources":["components/Filter.js","components/AddContact.js","components/NumbersList.js","services/contact.js","components/AddNotification.js","App.js","serviceWorker.js","index.js"],"names":["Filter","filter","handleFilterChange","value","onChange","AddContact","addContact","newName","newNumber","handleNewName","handleNewNumber","onSubmit","type","NumbersList","numbers","handleDeleteButton","deleteContact","length","filtered","lowerCaseFilter","toLowerCase","name","includes","map","filteredArray","key","id","number","onClick","getAllPersons","axios","get","createContact","newObject","post","delete","AddNotification","goodMessage","notification","style","marginLeft","marginRight","border","color","App","useState","persons","setPersons","setNewName","setNewNumber","setFilter","deleteId","setDeleteId","message","setMessage","setGoodMessage","useEffect","contactService","then","response","data","undefined","console","log","event","preventDefault","contactObject","listOfContacts","setTimeout","concat","notificationName","target","window","confirm","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cb12089d.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Filter = ({filter, handleFilterChange}) => {\r\n    return <form>\r\n          <div>\r\n            filter contacts: <input\r\n            value = {filter}\r\n            onChange = {handleFilterChange}/>\r\n          </div>\r\n  \r\n        </form>\r\n  }\r\n\r\nexport default Filter","import React from 'react'\r\n\r\nconst AddContact = ({addContact, newName, newNumber, handleNewName, handleNewNumber}) => {\r\n    return <form onSubmit = {addContact}>\r\n          <div>\r\n            name: <input \r\n            value = {newName}\r\n            onChange = {handleNewName}\r\n            />\r\n            </div>\r\n            <div>\r\n            number: <input\r\n            value = {newNumber}\r\n            onChange = {handleNewNumber}\r\n            />\r\n            </div>\r\n            <div>\r\n            <button type=\"submit\">add</button>\r\n          </div>\r\n          </form>\r\n            }\r\n\r\nexport default AddContact","import React from 'react'\r\n\r\nconst NumbersList = ({numbers, filter, handleDeleteButton, deleteContact}) => {\r\n\r\n    if (numbers.length > 0){\r\n    const filteredArray = numbers.filter((filtered) => {\r\n  \r\n    const lowerCaseFilter = filter.toLowerCase()\r\n    const lowerCasePerson = filtered.name.toLowerCase()\r\n  \r\n    return lowerCasePerson.includes(lowerCaseFilter)\r\n  })\r\n  \r\n  return filteredArray.map(filteredArray =>\r\n    <p key = {filteredArray.id}>{filteredArray.name} {filteredArray.number} <button value = {filteredArray.id} onClick = {handleDeleteButton}>Delete Contact</button></p>)\r\n  }\r\nelse{\r\n  return null\r\n} \r\n}\r\n\r\nexport default NumbersList","import axios from 'axios'\r\n\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAllPersons = () => {\r\n    return  axios\r\n    .get(baseUrl)\r\n}\r\n\r\nconst createContact = (newObject) => {\r\n    return axios \r\n    .post(baseUrl, newObject)\r\n}\r\n\r\nconst deleteContact = (id) => {\r\n    return axios\r\n      .delete(`${baseUrl}/${id}`)\r\n}\r\nexport default {getAllPersons, createContact, deleteContact}","import React from 'react'\r\n\r\nconst AddNotification = ( {goodMessage, notification }) => {\r\n    if(goodMessage){\r\n        const textStyle = {\r\n            marginLeft: \"25%\",\r\n            marginRight: \"25%\",\r\n            border: \"solid\",\r\n            color:  \"#228B22\"\r\n        }\r\n    if (notification) {\r\n            return <p style = {textStyle}>{notification}</p>\r\n        }\r\n            else {\r\n                return null\r\n            }\r\n    }\r\n\r\n    else {\r\n        const textStyle = {\r\n                marginLeft: \"25%\",\r\n                marginRight: \"25%\",\r\n                border: \"solid\",\r\n                color:  \"red\"\r\n            }\r\n        if (notification) {\r\n                return <p style = {textStyle}>{notification}</p>\r\n            }\r\n                else {\r\n                    return null\r\n                }\r\n        }\r\n\r\n\r\n    \r\n}\r\n\r\nexport default AddNotification","import React, { useState, useEffect } from 'react'\nimport Filter from './components/Filter'\nimport AddContact from './components/AddContact'\nimport NumbersList from './components/NumbersList'\nimport contactService from './services/contact'\nimport AddNotification from './components/AddNotification'\n\n\n\nconst App = () => {\n\n  const [ persons, setPersons] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber] = useState('')\n  const [filter, setFilter] = useState('')\n  const [deleteId, setDeleteId] = useState()\n  const [message, setMessage] = useState('')\n  const [goodMessage, setGoodMessage] = useState(true)\n\n\n  useEffect(() => {\n    contactService\n      .getAllPersons()\n        .then(response =>{\n          setPersons(response.data)\n        })\n    }, [])\n\n\n  useEffect(() => {\n    if (deleteId === undefined){\n      return\n    }\n\n    else {\n      contactService\n        .deleteContact(deleteId)\n          .then(() =>\n          contactService\n            .getAllPersons()\n            .then(response => {\n            console.log(response.data)\n            setPersons(response.data)\n            setDeleteId()\n          } \n      ))  \n    }\n  }, [deleteId])\n\n\n  const addContact = (event) => {\n    event.preventDefault()\n    \n    const contactObject = {\n      name: newName,\n      number: newNumber,\n    }\n    console.log(persons)\n\n    const listOfContacts = persons.map(persons => \n      persons.name)\n\n      if (!newName){\n        setGoodMessage(false)\n        setMessage('Please add a name')\n        setTimeout(() => {\n          setMessage(null)\n        }, 2000)\n        return \n      }\n\n      if (!newNumber){\n        setGoodMessage(false)\n        setMessage('Please add a number')\n        setTimeout(() => {\n          setMessage(null)\n        }, 2000)\n        return\n      }\n\n      if(!listOfContacts.includes(newName)){\n\n        contactService\n          .createContact(contactObject)\n          .then (response => {\n            console.log(response)\n            setPersons(persons.concat(response.data))\n\n            const notificationName = newName\n            setGoodMessage(true)\n            setMessage(`${notificationName} has been added to the list of contacts.`)\n            setTimeout(() => {\n              setMessage(null)\n            }, 2000)\n\n            setNewName('')\n            setNewNumber('')\n          })\n\n    \n\n      }\n    else {\n      setGoodMessage(false)\n      setMessage(`${newName} is already in the list of contacts.`)\n      setTimeout(() => {\n        setMessage(null)\n      }, 2000)\n      setNewNumber('')\n      setNewName('')\n    }\n  }\n\n  const handleDeleteButton = (event) => {\n    if (window.confirm(`Are you sure you want to delete the contact?`)){\n    setDeleteId(event.target.value)\n    setGoodMessage(true)\n    setMessage('Contact deleted')\n    setTimeout(() => {\n      setMessage(null)\n    }, 2000)\n      \n    }\n    else {\n      return\n    }\n  }\n\n\n  const handleFilterChange = (event) => {\n    setFilter(event.target.value)\n  }\n\n  const handleNewName = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handleNewNumber = (event) => {\n    setNewNumber(event.target.value)\n  }\n  \n\n\n  return (\n    <div>\n      <h1>Phonebook</h1 >\n      <h2>Add a new contact</h2>\n      <AddNotification goodMessage = {goodMessage} notification = {message}/>\n      <AddContact addContact = {addContact} newName = {newName} newNumber = {newNumber} handleNewName = {handleNewName} handleNewNumber = {handleNewNumber}/>\n      <h2>Contacts</h2>\n      <Filter filter = {filter} handleFilterChange = {handleFilterChange}/>\n      <NumbersList numbers = {persons} filter = {filter} handleDeleteButton = {handleDeleteButton} deleteContact = {contactService.deleteContact}/>\n    </div>\n  )\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}